// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopifyHotelSourcing.Repositories;

namespace ShopifyHotelSourcing.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.Country", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("isoCode")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.Destination", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("countryCode")
                        .HasColumnType("text");

                    b.Property<string>("isoCode")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.HasIndex("countryCode");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.GroupZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DestinationCode")
                        .HasColumnType("text");

                    b.Property<string>("groupZoneCode")
                        .HasColumnType("text");

                    b.Property<List<int>>("zones")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCode");

                    b.ToTable("GroupZones");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.State", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("countryCode")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.HasIndex("countryCode");

                    b.ToTable("States");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DestinationCode")
                        .HasColumnType("text");

                    b.Property<int>("GroupZoneID")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("zoneCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCode");

                    b.HasIndex("GroupZoneID");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Types.NameModel", b =>
                {
                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.ToTable("NameContents");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.Destination", b =>
                {
                    b.HasOne("ShopifyHotelSourcing.DBModels.Locations.Country", "country")
                        .WithMany("destinations")
                        .HasForeignKey("countryCode");

                    b.Navigation("country");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.GroupZone", b =>
                {
                    b.HasOne("ShopifyHotelSourcing.DBModels.Locations.Destination", "Destination")
                        .WithMany("groupZones")
                        .HasForeignKey("DestinationCode");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.State", b =>
                {
                    b.HasOne("ShopifyHotelSourcing.DBModels.Locations.Country", "country")
                        .WithMany("states")
                        .HasForeignKey("countryCode");

                    b.Navigation("country");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.Zone", b =>
                {
                    b.HasOne("ShopifyHotelSourcing.DBModels.Locations.Destination", "Destination")
                        .WithMany("zones")
                        .HasForeignKey("DestinationCode");

                    b.HasOne("ShopifyHotelSourcing.DBModels.Locations.GroupZone", "GroupZone")
                        .WithMany("ZonesList")
                        .HasForeignKey("GroupZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("GroupZone");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.Country", b =>
                {
                    b.Navigation("destinations");

                    b.Navigation("states");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.Destination", b =>
                {
                    b.Navigation("groupZones");

                    b.Navigation("zones");
                });

            modelBuilder.Entity("ShopifyHotelSourcing.DBModels.Locations.GroupZone", b =>
                {
                    b.Navigation("ZonesList");
                });
#pragma warning restore 612, 618
        }
    }
}
